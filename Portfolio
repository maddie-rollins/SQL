CREATE TABLE Store (id INTEGER PRIMARY KEY, Item text, Price INTEGER, aisle INTEGER, Qty INTEGER);

insert into Store VALUES (1, "pink", 5, 1, 2);
insert into Store VALUES (2, "blue", 6, 2, 3);
insert into store values (3, "green", 7, 2, 2);
insert into store values (4, "yellow", 8, 4, 5);
insert into store values (5, "red", 9, 3, 4);
insert into store values (6, "purple", 10, 3, 4);
insert into store values (7, "blue", 11, 2, 1);
insert into store values (8, "orange", 12, 3, 2);
insert into store values (9, "black", 13,3,1);
insert into store values (10, "tan", 14, 2, 1);
insert into store values (11, "gray", 15, 2, 3);
insert into store values (12, "white", 16, 3, 2);
insert into store values (13, "beige", 17, 3, 2);
insert into store values (14, "gold", 18, 1, 3);
insert into store values (15, "silver", 19, 2, 1);
SELECT * FROM Store
order by price asc;
Select MAX(Price) from store;
Select * from Store where Price >10

#This database stores different colors of tee shirts sold at one store. I made a table titled "Store," with columns containg information about each item
such as the price, quantity in stock, and the aisle in which it is located. I then sorted the data by price- from lowest to highest, showed the maximum
price, and filtered the data by items that cost more than 10 dollars.  


#In this SQL, I'm querying a database with multiple tables in it to quantify statistics about customer and order data. 

#1. How many orders were placed in January? 
SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'

#2. How many of those orders were for an iPhone? 
SELECT COUNT(orderid)
FROM BIT_DB.JanSales
WHERE Product='iPhone'
AND length(orderid) = 6 
AND orderid <> 'Order ID'

#3. Select the customer account numbers for all the orders that were placed in February. 
SELECT distinct acctnum
FROM BIT_DB.customers cust

INNER JOIN BIT_DB.FebSales Feb
ON cust.order_id=FEB.orderid
WHERE length(orderid) = 6 
AND orderid <> 'Order ID'

#4. Which product was the cheapest one sold in January, and what was the price? 
SELECT distinct Product, price
FROM BIT_DB.JanSales
WHERE  price in (SELECT min(price) FROM BIT_DB.JanSales)
#OR 
SELECT distinct product, price FROM BIT_DB.JanSales 
ORDER BY price ASC LIMIT 1

#5. What is the total revenue for each product sold in January?
SELECT sum(quantity)*price as revenue
,product
FROM BIT_DB.JanSales
GROUP BY product

#6. Which products were sold in February at 548 Lincoln St, Seattle, WA 98101, how many of each were sold, and what was the total revenue?
select 
sum(Quantity), 
product, 
sum(quantity)*price as revenue
FROM BIT_DB.FebSales 
WHERE location = '548 Lincoln St, Seattle, WA 98101'
GROUP BY product

#7. How many customers ordered more than 2 products at a time, and what was the average amount spent for those customers? 
select 
count(distinct cust.acctnum), 
avg(quantity*price)
FROM BIT_DB.FebSales Feb
LEFT JOIN BIT_DB.customers cust
ON FEB.orderid=cust.order_id
WHERE Feb.Quantity>2
AND length(orderid) = 6 
AND orderid <> 'Order ID'

# Below are some examples of filtering the data by date in a few different ways
SELECT orderdate
FROM BIT_DB.FebSales
WHERE orderdate between '02/13/19 00:00' AND '02/18/19 00:00';

SELECT location
FROM BIT_DB.FebSales 
WHERE orderdate = '02/18/19 01:35';

SELECT sum(quantity)
FROM BIT_DB.FebSales 
WHERE orderdate like '02/18/19%';

SELECT distinct Product
FROM BIT_DB.FebSales
WHERE Product like '%Batteries%';

SELECT distinct Product, Price
FROM BIT_DB.FebSales 
WHERE Price like '%.99' order by Price desc;

select Product, sum(Quantity) from BIT_DB.FebSales
WHERE location like '%Los Angeles%' group by product;

SELECT location,count(orderID) FROM BIT_DB.JanSales where location LIKE '%NY%' and length(orderid) = 6 
AND orderid <> 'Order ID' group by location having count(orderID) >2;

select product, sum(quantity) as quantity from BIT_DB.FebSales where product like '%headphone%' 
and length(orderid) = 6 
AND orderid <> 'Order ID' group by product;

select sum(quantity*price)/count(customers.acctnum) from BIT_DB.FebSales
LEFT JOIN BIT_DB.customers on FebSales.orderid = customers.order_id where 
length(orderid) = 6 
AND orderid <> 'Order ID';

select sum(quantity)/count(customers.acctnum) from BIT_DB.FebSales
left join BIT_DB.customers on FebSales.orderid =customers.order_id where
length(orderid) = 6 
AND orderid <> 'Order ID';

select product,sum(quantity*price) as 'total revenue' from BIT_DB.JanSales where length(orderid) = 6 
AND orderid <> 'Order ID' 
group by product order by sum(quantity*price) desc limit 1;

# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

#First I determined the avg popularity, danceability, and energy by artist and track. 
SELECT
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name;

#Then I determined who the Top 10 artists are by popularity
SELECT track_name, artist_name, popularity
FROM BIT_DB.spotifydata
ORDER BY popularity desc
LIMIT 10;

#In the project below, I insterted data containing information about City Bike Lanes, such as the street the bike lane is located on, 
safety ratings, the year installed, year updated, ect. I then used a window function to provide the following information: 
# A list of all the bike lanes, both safety ratings for each lane, the average safety rating for each lane, and a label with the recommendation as
#"Remove", "Leave As-Is", or "Improvements Needed".

SELECT street, safetyrating,
AVG(safetyrating) OVER (PARTITION BY street) as "Average_safety_rating",
CASE WHEN AVG(safetyrating) OVER (PARTITION BY street) >=4 THEN "Leave As-Is"
    WHEN AVG(safetyrating) OVER (PARTITION BY street) <2.5 THEN "Remove"
    ELSE "Improvements Needed"
    END AS "Recommendation"
FROM CityBikeLanes;
